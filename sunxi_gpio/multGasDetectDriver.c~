#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/interrupt.h>
#include <linux/platform_device.h>
#include <linux/device.h>
#include <linux/list.h>
#include <linux/slab.h>
#include <linux/module.h> /* for THIS_MODULE */
#include <mach/sys_config.h>
#include <mach/gpio.h> /* for new api */
#include <linux/gpio.h> /* for new api */
#include <asm/io.h>
#include <asm/uaccess.h>
#include <linux/compat.h>
#include <linux/mutex.h>
#include <linux/kthread.h>
#include <linux/delay.h>


#include "multGasDetectDriver.h"

#include <linux/ioctl.h>
#include <linux/fs.h>
#include <asm/uaccess.h>

#include <linux/delay.h>
#include <linux/ctype.h>

#define hello_major 	153
#define GPIODEV_MAJOR	153
#define GPIO_IRQ  28
#define AD7790_SPI_DELAY 2000


#define MULTGAS_DEBUG_BH		KERN_ALERT
#define AD7790_DEBUG_BH			KERN_ALERT//KERN_DEBUG

#if 1
#define MULTGAS_DEBUG(fmt...) printk(fmt)
#else
#define MULTGAS_DEBUG(fmt...) do{} while (0)
#endif

#define REG_RD(fmt...)	__raw_readl(fmt)

static struct platform_device mult_gas_dev;
static struct mult_gas_platdata gas_datesw;

struct mult_gas {
	struct mult_gas_classdev		cdev;
	struct mult_gas_platdata		*pdata;
};
static struct class *mult_gas_class;
static struct task_struct *multgas_kthread;

static unsigned char AD7790_SPI2_CS1=0;
static unsigned char AD7790_SPI2_CLK=0;
static unsigned char AD7790_SPI2_MOSI=0;
static unsigned char AD7790_SPI2_MISO=0;

unsigned short ADC_CH1_DATA;

//#define AD7790_SPI2_CS1	0x26	/*PB14*/
//#define AD7790_SPI2_CLK	0x27	/*PB15*/
//#define AD7790_SPI2_MOSI	0x28	/*PB16*/
//#define AD7790_SPI2_MISO	0x29	/*PB17*/

void __aeabi_fadd(void){} 
void __aeabi_dadd(void){} 
void __aeabi_dsub(void){} 
void __aeabi_i2d(void){} 
void __aeabi_d2uiz(void){} 
void __aeabi_f2d(void){}
void __aeabi_fmul(void){}
void __aeabi_ui2f(void){}
void __aeabi_dmul(void){}

static void setGpio(unsigned char gpio, int value)
{
	__gpio_set_value(gpio,value);
}
static int getGpio(unsigned char gpio)
{
	return __gpio_get_value(gpio);
}
static void AD7790WirteReg(unsigned char byteword)
{
	unsigned char temp;
	int i;
	setGpio(AD7790_SPI2_CS1,0);
	ndelay(AD7790_SPI_DELAY);
	temp=0x80;
	for(i=0;i<8;i++)
	{
		if((temp&byteword)==0)
		{
			setGpio(AD7790_SPI2_MOSI,0);
			ndelay(AD7790_SPI_DELAY);
		}
		else 
		{
			setGpio(AD7790_SPI2_MOSI,1);
			ndelay(AD7790_SPI_DELAY);
		}
		setGpio(AD7790_SPI2_CLK,0);
		ndelay(AD7790_SPI_DELAY);
		setGpio(AD7790_SPI2_CLK,1);
		ndelay(AD7790_SPI_DELAY);
		temp=temp>>1;
	}
	setGpio(AD7790_SPI2_CS1,1);
	ndelay(AD7790_SPI_DELAY);
}

static void AD7790ReadFromReg(int bytenumber)
{
	int j;
	unsigned char temp1;
	setGpio(AD7790_SPI2_MOSI,0);
	ndelay(AD7790_SPI_DELAY);
	setGpio(AD7790_SPI2_CS1,0);
	ndelay(AD7790_SPI_DELAY);
	temp1=0x00;

	for(j=0;j<bytenumber;j++)
	{
		setGpio(AD7790_SPI2_CLK,0);
		ndelay(AD7790_SPI_DELAY);
		if(getGpio(AD7790_SPI2_MISO)==0)
			temp1=temp1<<1;
		else
		{
			temp1=temp1<<1;
			temp1=temp1+0x01;
		}
		setGpio(AD7790_SPI2_CLK,1);
		ndelay(AD7790_SPI_DELAY);
		if(j==7||j==15||j==23)
		{ 
			//GPIO_SW_DEBUG( "0x%02X \n",temp1);
			MULTGAS_DEBUG(AD7790_DEBUG_BH " 0x%02X ",temp1);
			temp1=0x00;
		}
	}
	setGpio(AD7790_SPI2_CS1,1);
	ndelay(AD7790_SPI_DELAY);
}

static int AD7790ReadData(int readtime)
{
	unsigned short temp1;
	unsigned long  volteage_val=0;
	float ret;
	int i,j;
	setGpio(AD7790_SPI2_MOSI,0);
	ndelay(AD7790_SPI_DELAY);
	setGpio(AD7790_SPI2_CS1,0);
	ndelay(AD7790_SPI_DELAY);
	for(i=0;i<readtime;i++)
	{
		temp1=0;
		volteage_val=0;
		ret=0;
		while(getGpio(AD7790_SPI2_MISO))
		{
			if( kthread_should_stop())  return -1; 
		}

		for(j=0;j<16;j++)
		{
			setGpio(AD7790_SPI2_CLK,0);
			ndelay(AD7790_SPI_DELAY);
			if(getGpio(AD7790_SPI2_MISO)==0)
				temp1=temp1<<1;
			else
			{
				temp1=temp1<<1;
				temp1=temp1+0x01;
			}
			setGpio(AD7790_SPI2_CLK,1);
			ndelay(AD7790_SPI_DELAY);
#if 1			
			if(j==15)
			{
				MULTGAS_DEBUG(AD7790_DEBUG_BH " 0x%02X ",temp1);
				/*volteage_val=(temp1-32768)*2.5;
				MULTGAS_DEBUG(AD7790_DEBUG_BH "%02X-->>",volteage_val);
				ret=(float)volteage_val/32768;
				MULTGAS_DEBUG(AD7790_DEBUG_BH "%.6f",ret);*/
				ADC_CH1_DATA=temp1;
			}
#endif			
#if 0			
			if(j==7||j==15||j==23)
			{ 
				//volteage_val=volteage_val<<8;
				//volteage_val=volteage_val|temp1;
				//printf("%02X   ",temp1);
				//GPIO_SW_DEBUG( "%02X",temp1);
				MULTGAS_DEBUG(AD7790_DEBUG_BH "%02X",temp1);
				//printf("%02X",volteage_val);
				temp1=0x00;
			}
#endif			
		}
		//MULTGAS_DEBUG(AD7790_DEBUG_BH "\r\n");
	}

	while(getGpio(AD7790_SPI2_MISO))
	{
		if( kthread_should_stop())  return -1; 
	}
	AD7790WirteReg(0x38); //stop continuous read mode
	MULTGAS_DEBUG(AD7790_DEBUG_BH "\r\nmult-gas::AD7790::read reg over!\r\n");
	setGpio(AD7790_SPI2_CS1,1);
	ndelay(AD7790_SPI_DELAY);
	return 0;
}

static int AD7790Read(int ret)
{
	int k;
	k=32;
	setGpio(AD7790_SPI2_CLK,1);
	ndelay(AD7790_SPI_DELAY);
	MULTGAS_DEBUG(AD7790_DEBUG_BH "\r\nmult-gas::AD7790::\r\n");
	setGpio(AD7790_SPI2_CS1,0);
	ndelay(AD7790_SPI_DELAY);
	setGpio(AD7790_SPI2_MOSI,1);
	ndelay(AD7790_SPI_DELAY);

	while(k--)
	{
		setGpio(AD7790_SPI2_CLK,0);
		ndelay(AD7790_SPI_DELAY);
		setGpio(AD7790_SPI2_CLK,1);
		ndelay(AD7790_SPI_DELAY);
	}
	setGpio(AD7790_SPI2_CS1,1);
	ndelay(AD7790_SPI_DELAY);
	AD7790WirteReg(0x10); //write to communication register. The next step is writing to mode REGISTER
	AD7790WirteReg(0x02); //set the mode register as continuous conversion mode. bipolar mode.buffered


	MULTGAS_DEBUG(AD7790_DEBUG_BH "mult-gas::AD7790::read from mode REGISTER=  ");
	AD7790WirteReg(0x18); //write to communication register. The next step is read from mode REGISTER
	AD7790ReadFromReg(8);
	MULTGAS_DEBUG(AD7790_DEBUG_BH "\r\n");

	MULTGAS_DEBUG(AD7790_DEBUG_BH "mult-gas::AD7790::read from filter REGISTER=  ");

	AD7790WirteReg(0x28); //write to communication register. The next step is read from filter REGISTER
	AD7790ReadFromReg(8);
	MULTGAS_DEBUG(AD7790_DEBUG_BH "\r\n");

	MULTGAS_DEBUG(AD7790_DEBUG_BH "mult-gas::AD7790::read from status REGISTER=  ");
	AD7790WirteReg(0x08); //write to communication register. The next step is read from status REGISTER
	AD7790ReadFromReg(8);
	MULTGAS_DEBUG(AD7790_DEBUG_BH "\r\n");


	MULTGAS_DEBUG(AD7790_DEBUG_BH "mult-gas::AD7790::read from data REGISTER=  ");
	AD7790WirteReg(0x3C); //write to communication register. The next step is read from data register continuously
	AD7790ReadData(ret);
	MULTGAS_DEBUG(AD7790_DEBUG_BH "\r\n");

	AD7790WirteReg(0x10); //write to communication register. The next step is writing to mode register
	AD7790WirteReg(0x0C2); //put ADC into powerdown mode.
	AD7790WirteReg(0x18); //write to communication register. The next step is read from mode REGISTER
	AD7790ReadFromReg(8);
	MULTGAS_DEBUG(AD7790_DEBUG_BH "mult-gas::AD7790::finished \n");
	return ret;
}






static ssize_t data_show(struct device *dev,struct device_attribute *attr, char *buf)
{
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::data_show \n");
//	AD7790Read(1);
	return sprintf(buf, "%d\n",ADC_CH1_DATA);
	//return "12\n";
} 
static ssize_t data_store(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
{
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::data_store \n");
	return ADC_CH1_DATA;
}
static ssize_t cmd_show(struct device *dev,struct device_attribute *attr, char *buf)
{
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::cmd_show \n");
	return 14;
}
static ssize_t cmd_store(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
{
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::cmd_store \n");
	return ADC_CH1_DATA;
}
static int multgas_getData_threadHandle(void *arg) 
{
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::multgas_getData_threadHandle\n");
	while(1)
	{
		if( kthread_should_stop())  return -1; 
		//MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::thread test!!\n");
		msleep(5);
		AD7790Read(20);
//		setGpio(AD7790_SPI2_CLK,1); 
//		setGpio(AD7790_SPI2_CS1,1);
//		setGpio(AD7790_SPI2_MOSI,1);
//		MULTGAS_DEBUG(MULTGAS_DEBUG_BH "AD7790_SPI2_MISO=%d\n",getGpio(AD7790_SPI2_MISO));

	}
	return 0;
}
irqreturn_t mult_gas_interrupt(int irq,void *dev_id)
{
	unsigned int PIC, PIS,tmp;
	int i = 0;
	PIC = REG_RD(GPIO_TEST_BASE + 0x210 ) ;
	PIS = REG_RD(GPIO_TEST_BASE + 0x214 ) ;
	tmp	= PIS;

	while(tmp){
		if(tmp & 0x1){
		/*if (tmp & 0x1) is true, the i represent NO.i EINT interrupt take place.
		you can through the value of i to decide to do what*/
		MULTGAS_DEBUG(MULTGAS_DEBUG_BH "this is NO.%d gpio INT \n",i);
		}
		tmp >>= 1;
		i++;
	}

	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "0 PIC is %x \n PIS is %x \n",PIC,PIS);
	__raw_writel(PIS, GPIO_TEST_BASE + 0x214);
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "1 PIC is %x \n PIS is %x \n",PIC,PIS);

	/*this is a interface to connect interrupt top half and bottom half,if want to use bottom half,you can open fanctions sunxi_gpio_do_tasklet and tasklet_schedule*/

	/*
	tasklet_schedule(&sunxi_tasklet);
	*/
	return IRQ_HANDLED;
}

static int mult_gas_cfg_set(struct mult_gas_classdev *mult_gas_cdev,int  cfg_sel)
{
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::mult_gas_cfg_set \n");
	return 0;
}
static int mult_gas_data_get(struct mult_gas_classdev *mult_gas_cdev,int  pull)
{
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::mult_gas_data_get \n");
	return 0;
}


static void mult_gas_release (struct device *dev)
{
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::mult_gas_release \n");
}
static int mult_gas_resume(struct platform_device *dev)
{
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::mult_gas_resume \n");
	return 0;
}
static int mult_gas_suspend(struct platform_device *dev, pm_message_t state)
{
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::mult_gas_suspend \n");
	return 0;
}
static int __devexit mult_gas_remove(struct platform_device *dev)
{
	struct mult_gas *multgas=platform_get_drvdata(dev);
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::mult_gas_remove \n");
	//device_unregister(multgas->cdev.dev);
	
	device_destroy(mult_gas_class, MKDEV(GPIODEV_MAJOR,0));

	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::gpio_sw_classdev_unregister ok !\n");
	kfree(multgas);
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::kfree ok !\n");
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::mult_gas_remove \n");
	return 0;
}


static struct device_attribute mult_gas_class_attrs[] = {
	__ATTR(get_data, 0666, data_show, data_store),
	__ATTR(set_cmd, 0666, cmd_show, cmd_store),
	__ATTR_NULL,
};
static int __devinit mult_gas_probe(struct platform_device *dev)
{
	struct mult_gas *multgas;
	struct mult_gas_platdata *pdata = dev->dev.platform_data;
	unsigned int irq_ctl;
	int ret=0;
	/*char io_area[16];*/
    script_item_value_type_e type;
    script_item_u item;
    //int gpio_key_count = 0;
	int i=1;

	multgas = kzalloc(sizeof(struct mult_gas), GFP_KERNEL);
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "kzalloc ok !\n");

	if (multgas == NULL) 
	{
		dev_err(&dev->dev, "No memory for device\n");
		return -ENOMEM;
	}

	platform_set_drvdata(dev, multgas);
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "platform_set_drvdata ok !\n");
	//multgas->pdata = pdata;

	/*\BB\F1ȡGPIO  \BF\DA*/

	for(i=1;i<5;i++)
	{
	    sprintf(pdata->name, "gpio_pin_%d", i+1);
		
		MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas:: %s \n",pdata->name);
	    type = script_get_item("gpio_para", pdata->name, &item);
	    if (SCIRPT_ITEM_VALUE_TYPE_PIO != type) 
		{
			/*GPIO \BB\F1ȡʧ\B0\DC*/
	        MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::script_get_item return type err\n");
	        return -EFAULT;
	    }
		MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::pio_hdle = %x \n",item.gpio.gpio);
		if(i==1)		AD7790_SPI2_CS1=item.gpio.gpio;
		else if(i==2)	AD7790_SPI2_CLK=item.gpio.gpio;
		else if(i==3)	AD7790_SPI2_MOSI=item.gpio.gpio;
		else if(i==4)	AD7790_SPI2_MISO=item.gpio.gpio;


		/*if (0 != gpio_request_one(item.gpio.gpio, GPIOF_OUT_INIT_HIGH, NULL))
		{
			MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::gpio_request gpio:%d failed!\n",item.gpio.gpio);
	        	return -EFAULT;
	   	}*/
		/* add by cjcheng start {----------------------------------- */
		/* support Internal 3G 2013-04-24 */
		if (0 != sw_gpio_setall_range(&item.gpio, 1)) 
		{
			MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::gpio setall_range err!\n");
		    return -EFAULT;
		}

		if(item.gpio.mul_sel == 6)
		{
			if(item.gpio.port== 'H' - 'A' + 1)
			{
				if((item.gpio.port_num >= 0) && (item.gpio.port_num <= 21))
				{
					irq_ctl	=	REG_RD(GPIO_TEST_BASE + 0x210);
					__raw_writel((1 << item.gpio.port_num) | irq_ctl, GPIO_TEST_BASE + 0x210);
				}
				else
				{
					MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::this pin don`t have EINT FUNCTION!\n");
					kfree(multgas);
					return 1;
				}
			}
			else if(item.gpio.port== 'I' - 'A' + 1)
			{
				if((item.gpio.port_num >= 10) && (item.gpio.port_num <= 19))
				{
					irq_ctl	=	REG_RD(GPIO_TEST_BASE + 0x210);
					__raw_writel((1 << (item.gpio.port_num + 12)) | irq_ctl, GPIO_TEST_BASE + 0x210);
				}
				else
				{
					MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::this pin don`t have EINT FUNCTION!\n");
					kfree(multgas);
					return 1;
				}
			}
			else
			{
				MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::this area don`t have EINT FUNCTION\n");
				kfree(multgas);
				return 1;
			}
		}
	}

	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::AD7790_SPI2_CS1 = %x \n",AD7790_SPI2_CS1);
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::AD7790_SPI2_CLK = %x \n",AD7790_SPI2_CLK);
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::AD7790_SPI2_MOSI = %x \n",AD7790_SPI2_MOSI);
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::AD7790_SPI2_MISO = %x \n",AD7790_SPI2_MISO);


	multgas->cdev.mult_gas_cfg_set=mult_gas_cfg_set;
	multgas->cdev.mult_gas_data_get=mult_gas_data_get;
	multgas->cdev.name="mult_gas";


	//ret = device_create(mult_gas_class, &dev->dev, 0, &multgas->cdev,"%s", &multgas->cdev.name);
	mult_gas_class->dev_attrs 	= mult_gas_class_attrs;
	device_create(mult_gas_class, NULL, MKDEV(GPIODEV_MAJOR,0),&multgas->cdev, "mult_gas");
	if (ret < 0) 
	{
		dev_err(&dev->dev, "gpio_sw_classdev_register failed\n");
		kfree(multgas);
		return ret;
	}
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "gpio_sw_classdev_register ok !\n");

	
	return 0;
}

static struct platform_driver mult_gas_driver = {
	.probe		= mult_gas_probe,
	.remove		= mult_gas_remove,
	.suspend	= mult_gas_suspend,
	.resume		= mult_gas_resume,
	.driver		= {
		.name		= "mult_gas_driver",
		.owner		= THIS_MODULE,
	},
};


static int __init mult_gas_detect_init(void)
{
	/*int i, ret;*/
    int gpio_key_count = 0;
	/*int ret1;*/
    script_item_u gpio_used, *list = NULL;
    script_item_value_type_e type;

	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::mult_gas_detect_init\r\n");

	/*\BC\EC\B2\E9GPIO \CAǷ\F1\B6\A8\D2\E5*/
    type = script_get_item("gpio_para", "gpio_used", &gpio_used);
    if (SCIRPT_ITEM_VALUE_TYPE_INT != type) 
	{
        MULTGAS_DEBUG(MULTGAS_DEBUG_BH "[gpio_para] gpio_used err!\n");
        return -1;
    }
    if (1 == gpio_used.val) 
	{
        gpio_key_count = script_get_pio_list("gpio_para", &list);
        if (0 == gpio_key_count) 
		{
            MULTGAS_DEBUG(MULTGAS_DEBUG_BH "[gpio_para] get gpio list failed\n");
            return -1;
        }
    }

	multgas_kthread = kthread_create(multgas_getData_threadHandle, NULL, "mult_gas");
    if(IS_ERR(multgas_kthread))
	{  
		MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::creat kthread fail !!!!\n");
		multgas_kthread = NULL;  
    }
	else 
	{
		MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::creat kthread and run  !!!!\n");
		wake_up_process(multgas_kthread);
	}
	
    gas_datesw.flags = 0;
	gas_datesw.name="mult_gas_dev";

    mult_gas_dev.name = "mult_gas_driver";
    mult_gas_dev.id   = 0;
    mult_gas_dev.dev.platform_data= &gas_datesw;
    mult_gas_dev.dev.release = mult_gas_release;
    platform_device_register(&mult_gas_dev);

	mult_gas_class = class_create(THIS_MODULE, "mult_gas");
	/*ע\B2\E1platform \C7\FD\B6\AF*/
    platform_driver_register(&mult_gas_driver);
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::mult_gas_detect_init - over\r\n");

    return 0;
}

static void __exit mult_gas_detect_exit(void)
{
	MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::mult_gas_detect_exit\r\n");
	platform_driver_unregister(&mult_gas_driver);
	class_destroy(mult_gas_class);
    platform_device_unregister(&mult_gas_dev);
	kthread_stop(multgas_kthread);
	multgas_kthread=NULL;
    MULTGAS_DEBUG(MULTGAS_DEBUG_BH "mult-gas::platform_device_unregister finish !  \n");
}
module_init(mult_gas_detect_init);
module_exit(mult_gas_detect_exit);

MODULE_AUTHOR("qinxiaoyu <qinxiaoyu@163.com>");
MODULE_DESCRIPTION("MultGasDetect driver");
MODULE_LICENSE("GPL");
MODULE_ALIAS("platform:mult_gas_detect");
